[1mdiff --git a/src/App.test.tsx b/src/App.test.tsx[m
[1mdeleted file mode 100644[m
[1mindex 659cc13..0000000[m
[1m--- a/src/App.test.tsx[m
[1m+++ /dev/null[m
[36m@@ -1,15 +0,0 @@[m
[31m-import React from 'react';[m
[31m-import { render } from '@testing-library/react';[m
[31m-import { Provider } from 'react-redux';[m
[31m-import { store } from './app/store';[m
[31m-import App from './App';[m
[31m-[m
[31m-test('renders learn react link', () => {[m
[31m-  const { getByText } = render([m
[31m-    <Provider store={store}>[m
[31m-      <App />[m
[31m-    </Provider>[m
[31m-  );[m
[31m-[m
[31m-  expect(getByText(/learn/i)).toBeInTheDocument();[m
[31m-});[m
[1mdiff --git a/src/App.tsx b/src/App.tsx[m
[1mindex e8da502..32e4b0f 100644[m
[1m--- a/src/App.tsx[m
[1m+++ b/src/App.tsx[m
[36m@@ -1,56 +1,9 @@[m
[31m-import React from 'react';[m
[31m-import logo from './logo.svg';[m
[31m-import { Counter } from './features/counter/Counter';[m
 import './App.css';[m
 [m
 function App() {[m
   return ([m
     <div className="App">[m
[31m-      <header className="App-header">[m
[31m-        <img src={logo} className="App-logo" alt="logo" />[m
[31m-        <Counter />[m
[31m-        <p>[m
[31m-          Edit <code>src/App.tsx</code> and save to reload.[m
[31m-        </p>[m
[31m-        <span>[m
[31m-          <span>Learn </span>[m
[31m-          <a[m
[31m-            className="App-link"[m
[31m-            href="https://reactjs.org/"[m
[31m-            target="_blank"[m
[31m-            rel="noopener noreferrer"[m
[31m-          >[m
[31m-            React[m
[31m-          </a>[m
[31m-          <span>, </span>[m
[31m-          <a[m
[31m-            className="App-link"[m
[31m-            href="https://redux.js.org/"[m
[31m-            target="_blank"[m
[31m-            rel="noopener noreferrer"[m
[31m-          >[m
[31m-            Redux[m
[31m-          </a>[m
[31m-          <span>, </span>[m
[31m-          <a[m
[31m-            className="App-link"[m
[31m-            href="https://redux-toolkit.js.org/"[m
[31m-            target="_blank"[m
[31m-            rel="noopener noreferrer"[m
[31m-          >[m
[31m-            Redux Toolkit[m
[31m-          </a>[m
[31m-          ,<span> and </span>[m
[31m-          <a[m
[31m-            className="App-link"[m
[31m-            href="https://react-redux.js.org/"[m
[31m-            target="_blank"[m
[31m-            rel="noopener noreferrer"[m
[31m-          >[m
[31m-            React Redux[m
[31m-          </a>[m
[31m-        </span>[m
[31m-      </header>[m
[32m+[m
     </div>[m
   );[m
 }[m
[1mdiff --git a/src/app/store.ts b/src/app/store.ts[m
[1mindex 133ff34..3630172 100644[m
[1m--- a/src/app/store.ts[m
[1m+++ b/src/app/store.ts[m
[36m@@ -1,9 +1,7 @@[m
 import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';[m
[31m-import counterReducer from '../features/counter/counterSlice';[m
 [m
 export const store = configureStore({[m
   reducer: {[m
[31m-    counter: counterReducer,[m
   },[m
 });[m
 [m
[1mdiff --git a/src/features/counter/Counter.module.css b/src/features/counter/Counter.module.css[m
[1mdeleted file mode 100644[m
[1mindex 025bb72..0000000[m
[1m--- a/src/features/counter/Counter.module.css[m
[1m+++ /dev/null[m
[36m@@ -1,79 +0,0 @@[m
[31m-.row {[m
[31m-  display: flex;[m
[31m-  align-items: center;[m
[31m-  justify-content: center;[m
[31m-}[m
[31m-[m
[31m-.row > button {[m
[31m-  margin-left: 4px;[m
[31m-  margin-right: 8px;[m
[31m-}[m
[31m-[m
[31m-.row:not(:last-child) {[m
[31m-  margin-bottom: 16px;[m
[31m-}[m
[31m-[m
[31m-.value {[m
[31m-  font-size: 78px;[m
[31m-  padding-left: 16px;[m
[31m-  padding-right: 16px;[m
[31m-  margin-top: 2px;[m
[31m-  font-family: 'Courier New', Courier, monospace;[m
[31m-}[m
[31m-[m
[31m-.button {[m
[31m-  appearance: none;[m
[31m-  background: none;[m
[31m-  font-size: 32px;[m
[31m-  padding-left: 12px;[m
[31m-  padding-right: 12px;[m
[31m-  outline: none;[m
[31m-  border: 2px solid transparent;[m
[31m-  color: rgb(112, 76, 182);[m
[31m-  padding-bottom: 4px;[m
[31m-  cursor: pointer;[m
[31m-  background-color: rgba(112, 76, 182, 0.1);[m
[31m-  border-radius: 2px;[m
[31m-  transition: all 0.15s;[m
[31m-}[m
[31m-[m
[31m-.textbox {[m
[31m-  font-size: 32px;[m
[31m-  padding: 2px;[m
[31m-  width: 64px;[m
[31m-  text-align: center;[m
[31m-  margin-right: 4px;[m
[31m-}[m
[31m-[m
[31m-.button:hover,[m
[31m-.button:focus {[m
[31m-  border: 2px solid rgba(112, 76, 182, 0.4);[m
[31m-}[m
[31m-[m
[31m-.button:active {[m
[31m-  background-color: rgba(112, 76, 182, 0.2);[m
[31m-}[m
[31m-[m
[31m-.asyncButton {[m
[31m-  composes: button;[m
[31m-  position: relative;[m
[31m-}[m
[31m-[m
[31m-.asyncButton:after {[m
[31m-  content: '';[m
[31m-  background-color: rgba(112, 76, 182, 0.15);[m
[31m-  display: block;[m
[31m-  position: absolute;[m
[31m-  width: 100%;[m
[31m-  height: 100%;[m
[31m-  left: 0;[m
[31m-  top: 0;[m
[31m-  opacity: 0;[m
[31m-  transition: width 1s linear, opacity 0.5s ease 1s;[m
[31m-}[m
[31m-[m
[31m-.asyncButton:active:after {[m
[31m-  width: 0%;[m
[31m-  opacity: 1;[m
[31m-  transition: 0s;[m
[31m-}[m
[1mdiff --git a/src/features/counter/Counter.tsx b/src/features/counter/Counter.tsx[m
[1mdeleted file mode 100644[m
[1mindex ece5191..0000000[m
[1m--- a/src/features/counter/Counter.tsx[m
[1m+++ /dev/null[m
[36m@@ -1,68 +0,0 @@[m
[31m-import React, { useState } from 'react';[m
[31m-[m
[31m-import { useAppSelector, useAppDispatch } from '../../app/hooks';[m
[31m-import {[m
[31m-  decrement,[m
[31m-  increment,[m
[31m-  incrementByAmount,[m
[31m-  incrementAsync,[m
[31m-  incrementIfOdd,[m
[31m-  selectCount,[m
[31m-} from './counterSlice';[m
[31m-import styles from './Counter.module.css';[m
[31m-[m
[31m-export function Counter() {[m
[31m-  const count = useAppSelector(selectCount);[m
[31m-  const dispatch = useAppDispatch();[m
[31m-  const [incrementAmount, setIncrementAmount] = useState('2');[m
[31m-[m
[31m-  const incrementValue = Number(incrementAmount) || 0;[m
[31m-[m
[31m-  return ([m
[31m-    <div>[m
[31m-      <div className={styles.row}>[m
[31m-        <button[m
[31m-          className={styles.button}[m
[31m-          aria-label="Decrement value"[m
[31m-          onClick={() => dispatch(decrement())}[m
[31m-        >[m
[31m-          -[m
[31m-        </button>[m
[31m-        <span className={styles.value}>{count}</span>[m
[31m-        <button[m
[31m-          className={styles.button}[m
[31m-          aria-label="Increment value"[m
[31m-          onClick={() => dispatch(increment())}[m
[31m-        >[m
[31m-          +[m
[31m-        </button>[m
[31m-      </div>[m
[31m-      <div className={styles.row}>[m
[31m-        <input[m
[31m-          className={styles.textbox}[m
[31m-          aria-label="Set increment amount"[m
[31m-          value={incrementAmount}[m
[31m-          onChange={(e) => setIncrementAmount(e.target.value)}[m
[31m-        />[m
[31m-        <button[m
[31m-          className={styles.button}[m
[31m-          onClick={() => dispatch(incrementByAmount(incrementValue))}[m
[31m-        >[m
[31m-          Add Amount[m
[31m-        </button>[m
[31m-        <button[m
[31m-          className={styles.asyncButton}[m
[31m-          onClick={() => dispatch(incrementAsync(incrementValue))}[m
[31m-        >[m
[31m-          Add Async[m
[31m-        </button>[m
[31m-        <button[m
[31m-          className={styles.button}[m
[31m-          onClick={() => dispatch(incrementIfOdd(incrementValue))}[m
[31m-        >[m
[31m-          Add If Odd[m
[31m-        </button>[m
[31m-      </div>[m
[31m-    </div>[m
[31m-  );[m
[31m-}[m
[1mdiff --git a/src/features/counter/counterAPI.ts b/src/features/counter/counterAPI.ts[m
[1mdeleted file mode 100644[m
[1mindex 0a9cdd3..0000000[m
[1m--- a/src/features/counter/counterAPI.ts[m
[1m+++ /dev/null[m
[36m@@ -1,6 +0,0 @@[m
[31m-// A mock function to mimic making an async request for data[m
[31m-export function fetchCount(amount = 1) {[m
[31m-  return new Promise<{ data: number }>((resolve) =>[m
[31m-    setTimeout(() => resolve({ data: amount }), 500)[m
[31m-  );[m
[31m-}[m
[1mdiff --git a/src/features/counter/counterSlice.spec.ts b/src/features/counter/counterSlice.spec.ts[m
[1mdeleted file mode 100644[m
[1mindex 098163b..0000000[m
[1m--- a/src/features/counter/counterSlice.spec.ts[m
[1m+++ /dev/null[m
[36m@@ -1,34 +0,0 @@[m
[31m-import counterReducer, {[m
[31m-  CounterState,[m
[31m-  increment,[m
[31m-  decrement,[m
[31m-  incrementByAmount,[m
[31m-} from './counterSlice';[m
[31m-[m
[31m-describe('counter reducer', () => {[m
[31m-  const initialState: CounterState = {[m
[31m-    value: 3,[m
[31m-    status: 'idle',[m
[31m-  };[m
[31m-  it('should handle initial state', () => {[m
[31m-    expect(counterReducer(undefined, { type: 'unknown' })).toEqual({[m
[31m-      value: 0,[m
[31m-      status: 'idle',[m
[31m-    });[m
[31m-  });[m
[31m-[m
[31m-  it('should handle increment', () => {[m
[31m-    const actual = counterReducer(initialState, increment());[m
[31m-    expect(actual.value).toEqual(4);[m
[31m-  });[m
[31m-[m
[31m-  it('should handle decrement', () => {[m
[31m-    const actual = counterReducer(initialState, decrement());[m
[31m-    expect(actual.value).toEqual(2);[m
[31m-  });[m
[31m-[m
[31m-  it('should handle incrementByAmount', () => {[m
[31m-    const actual = counterReducer(initialState, incrementByAmount(2));[m
[31m-    expect(actual.value).toEqual(5);[m
[31m-  });[m
[31m-});[m
[1mdiff --git a/src/features/counter/counterSlice.ts b/src/features/counter/counterSlice.ts[m
[1mdeleted file mode 100644[m
[1mindex 015dca0..0000000[m
[1m--- a/src/features/counter/counterSlice.ts[m
[1m+++ /dev/null[m
[36m@@ -1,84 +0,0 @@[m
[31m-import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';[m
[31m-import { RootState, AppThunk } from '../../app/store';[m
[31m-import { fetchCount } from './counterAPI';[m
[31m-[m
[31m-export interface CounterState {[m
[31m-  value: number;[m
[31m-  status: 'idle' | 'loading' | 'failed';[m
[31m-}[m
[31m-[m
[31m-const initialState: CounterState = {[m
[31m-  value: 0,[m
[31m-  status: 'idle',[m
[31m-};[m
[31m-[m
[31m-// The function below is called a thunk and allows us to perform async logic. It[m
[31m-// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This[m
[31m-// will call the thunk with the `dispatch` function as the first argument. Async[m
[31m-// code can then be executed and other actions can be dispatched. Thunks are[m
[31m-// typically used to make async requests.[m
[31m-export const incrementAsync = createAsyncThunk([m
[31m-  'counter/fetchCount',[m
[31m-  async (amount: number) => {[m
[31m-    const response = await fetchCount(amount);[m
[31m-    // The value we return becomes the `fulfilled` action payload[m
[31m-    return response.data;[m
[31m-  }[m
[31m-);[m
[31m-[m
[31m-export const counterSlice = createSlice({[m
[31m-  name: 'counter',[m
[31m-  initialState,[m
[31m-  // The `reducers` field lets us define reducers and generate associated actions[m
[31m-  reducers: {[m
[31m-    increment: (state) => {[m
[31m-      // Redux Toolkit allows us to write "mutating" logic in reducers. It[m
[31m-      // doesn't actually mutate the state because it uses the Immer library,[m
[31m-      // which detects changes to a "draft state" and produces a brand new[m
[31m-      // immutable state based off those changes[m
[31m-      state.value += 1;[m
[31m-    },[m
[31m-    decrement: (state) => {[m
[31m-      state.value -= 1;[m
[31m-    },[m
[31m-    // Use the PayloadAction type to declare the contents of `action.payload`[m
[31m-    incrementByAmount: (state, action: PayloadAction<number>) => {[m
[31m-      state.value += action.payload;[m
[31m-    },[m
[31m-  },[m
[31m-  // The `extraReducers` field lets the slice handle actions defined elsewhere,[m
[31m-  // including actions generated by createAsyncThunk or in other slices.[m
[31m-  extraReducers: (builder) => {[m
[31m-    builder[m
[31m-      .addCase(incrementAsync.pending, (state) => {[m
[31m-        state.status = 'loading';[m
[31m-      })[m
[31m-      .addCase(incrementAsync.fulfilled, (state, action) => {[m
[31m-        state.status = 'idle';[m
[31m-        state.value += action.payload;[m
[31m-      })[m
[31m-      .addCase(incrementAsync.rejected, (state) => {[m
[31m-        state.status = 'failed';[m
[31m-      });[m
[31m-  },[m
[31m-});[m
[31m-[m
[31m-export const { increment, decrement, incrementByAmount } = counterSlice.actions;[m
[31m-[m
[31m-// The function below is called a selector and allows us to select a value from[m
[31m-// the state. Selectors can also be defined inline where they're used instead of[m
[31m-// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`[m
[31m-export const selectCount = (state: RootState) => state.counter.value;[m
[31m-[m
[31m-// We can also write thunks by hand, which may contain both sync and async logic.[m
[31m-// Here's an example of conditionally dispatching actions based on current state.[m
[31m-export const incrementIfOdd =[m
[31m-  (amount: number): AppThunk =>[m
[31m-  (dispatch, getState) => {[m
[31m-    const currentValue = selectCount(getState());[m
[31m-    if (currentValue % 2 === 1) {[m
[31m-      dispatch(incrementByAmount(amount));[m
[31m-    }[m
[31m-  };[m
[31m-[m
[31m-export default counterSlice.reducer;[m
[1mdiff --git a/src/index.tsx b/src/index.tsx[m
[1mindex 0e6466f..f45c5fe 100644[m
[1m--- a/src/index.tsx[m
[1m+++ b/src/index.tsx[m
[36m@@ -3,7 +3,6 @@[m [mimport { createRoot } from 'react-dom/client';[m
 import { Provider } from 'react-redux';[m
 import { store } from './app/store';[m
 import App from './App';[m
[31m-import reportWebVitals from './reportWebVitals';[m
 import './index.css';[m
 [m
 const container = document.getElementById('root')!;[m
[36m@@ -17,7 +16,3 @@[m [mroot.render([m
   </React.StrictMode>[m
 );[m
 [m
[31m-// If you want to start measuring performance in your app, pass a function[m
[31m-// to log results (for example: reportWebVitals(console.log))[m
[31m-// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals[m
[31m-reportWebVitals();[m
[1mdiff --git a/src/logo.svg b/src/logo.svg[m
[1mdeleted file mode 100644[m
[1mindex 8466738..0000000[m
[1m--- a/src/logo.svg[m
[1m+++ /dev/null[m
[36m@@ -1 +0,0 @@[m
[31m-<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><g fill="#764ABC"><path d="M65.6 65.4c2.9-.3 5.1-2.8 5-5.8-.1-3-2.6-5.4-5.6-5.4h-.2c-3.1.1-5.5 2.7-5.4 5.8.1 1.5.7 2.8 1.6 3.7-3.4 6.7-8.6 11.6-16.4 15.7-5.3 2.8-10.8 3.8-16.3 3.1-4.5-.6-8-2.6-10.2-5.9-3.2-4.9-3.5-10.2-.8-15.5 1.9-3.8 4.9-6.6 6.8-8-.4-1.3-1-3.5-1.3-5.1-14.5 10.5-13 24.7-8.6 31.4 3.3 5 10 8.1 17.4 8.1 2 0 4-.2 6-.7 12.8-2.5 22.5-10.1 28-21.4z"/><path d="M83.2 53c-7.6-8.9-18.8-13.8-31.6-13.8H50c-.9-1.8-2.8-3-4.9-3h-.2c-3.1.1-5.5 2.7-5.4 5.8.1 3 2.6 5.4 5.6 5.4h.2c2.2-.1 4.1-1.5 4.9-3.4H52c7.6 0 14.8 2.2 21.3 6.5 5 3.3 8.6 7.6 10.6 12.8 1.7 4.2 1.6 8.3-.2 11.8-2.8 5.3-7.5 8.2-13.7 8.2-4 0-7.8-1.2-9.8-2.1-1.1 1-3.1 2.6-4.5 3.6 4.3 2 8.7 3.1 12.9 3.1 9.6 0 16.7-5.3 19.4-10.6 2.9-5.8 2.7-15.8-4.8-24.3z"/><path d="M32.4 67.1c.1 3 2.6 5.4 5.6 5.4h.2c3.1-.1 5.5-2.7 5.4-5.8-.1-3-2.6-5.4-5.6-5.4h-.2c-.2 0-.5 0-.7.1-4.1-6.8-5.8-14.2-5.2-22.2.4-6 2.4-11.2 5.9-15.5 2.9-3.7 8.5-5.5 12.3-5.6 10.6-.2 15.1 13 15.4 18.3 1.3.3 3.5 1 5 1.5-1.2-16.2-11.2-24.6-20.8-24.6-9 0-17.3 6.5-20.6 16.1-4.6 12.8-1.6 25.1 4 34.8-.5.7-.8 1.8-.7 2.9z"/></g></svg>[m
[1mdiff --git a/src/reportWebVitals.ts b/src/reportWebVitals.ts[m
[1mdeleted file mode 100644[m
[1mindex 49a2a16..0000000[m
[1m--- a/src/reportWebVitals.ts[m
[1m+++ /dev/null[m
[36m@@ -1,15 +0,0 @@[m
[31m-import { ReportHandler } from 'web-vitals';[m
[31m-[m
[31m-const reportWebVitals = (onPerfEntry?: ReportHandler) => {[m
[31m-  if (onPerfEntry && onPerfEntry instanceof Function) {[m
[31m-    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {[m
[31m-      getCLS(onPerfEntry);[m
[31m-      getFID(onPerfEntry);[m
[31m-      getFCP(onPerfEntry);[m
[31m-      getLCP(onPerfEntry);[m
[31m-      getTTFB(onPerfEntry);[m
[31m-    });[m
[31m-  }[m
[31m-};[m
[31m-[m
[31m-export default reportWebVitals;[m
[1mdiff --git a/src/setupTests.ts b/src/setupTests.ts[m
[1mdeleted file mode 100644[m
[1mindex 74b1a27..0000000[m
[1m--- a/src/setupTests.ts[m
[1m+++ /dev/null[m
[36m@@ -1,5 +0,0 @@[m
[31m-// jest-dom adds custom jest matchers for asserting on DOM nodes.[m
[31m-// allows you to do things like:[m
[31m-// expect(element).toHaveTextContent(/react/i)[m
[31m-// learn more: https://github.com/testing-library/jest-dom[m
[31m-import '@testing-library/jest-dom/extend-expect';[m
